% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunk_apply.R
\name{chunk_apply}
\alias{chunk_apply}
\title{Apply a function on chunks of a data cube}
\usage{
chunk_apply(cube, f)
}
\arguments{
\item{cube}{Source data cube}

\item{f}{R function to apply over all chunks}
}
\value{
A proxy data cube object
}
\description{
Apply a function on chunks of a data cube
}
\details{
This function internally creates a gdalcubes stream data cube, which streams
data of a chunk to a new R process. For reading data the function typically 
calls \code{x <- read_chunk_as_array()} which then results in a 4 dimensional (band, time, y, x) array.
Similarly \code{write_chunk_from_array(x)} will write a result array as a chunk in the resulting data cube.
The chunk size of the input cube is important to control how the function will be exposed on the data cube. For example,
if you want to apply an R function over complete pixel time series, you must define the chunk size argument in \code{data_cube()}
to make sure that chunk contain the correct parts of the data.
}
\note{
This function returns a proxy object, i.e., it will not start any computations besides deriving the shape of the result.
}
\examples{
\dontrun{
f <- function() {
  x = read_chunk_as_array()
  out <- reduce_time(x, function(x) {
    y = x[1,]
    mean(y, na.rm=T)})
  write_chunk_from_array(out)
}
xstrm <- chunk_apply(XXX, f)
}
}
