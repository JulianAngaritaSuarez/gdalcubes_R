% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_pixel.R
\name{apply_pixel.cube}
\alias{apply_pixel.cube}
\title{Apply arithmetic expressions over all pixels of a data cube}
\usage{
\method{apply_pixel}{cube}(x, expr, names = NULL, ...)
}
\arguments{
\item{x}{Source data cube}

\item{expr}{character vector with one or more arithmetic expressions (see Details)}

\item{names}{optional character vector with the same length as expr to specify band names for the output cube}

\item{...}{not used}
}
\value{
A proxy data cube object
}
\description{
Create a proxy data cube, which applies arithmetics expressions over all pixels of a data cube. Expressions may access band values by their name.
}
\details{
gdalcubes uses the \href{https://github.com/codeplea/tinyexpr}{tinyexpr library} to evaluate expressions in C / C++, you can look at the \href{https://github.com/codeplea/tinyexpr#functions-supported}{library documentation}
to see what kind of expressions you can execute. Pixel band values can be accessed by their name.
}
\note{
This function returns a proxy object, i.e., it will not start any computations besides deriving the shape of the result.
}
\examples{
 L8_files <- list.files(system.file("L8NY18", package = "gdalcubes"), 
                        ".TIF", recursive = TRUE, full.names = TRUE)
 v = cube_view(extent=list(left=388941.2, right=766552.4, 
               bottom=4345299, top=4744931, t0="2018-01", t1="2018-12"),
               srs="EPSG:32618", nx = 497, ny=526, dt="P1M")
 L8.col = create_image_collection(L8_files, "L8_L1TP") 
 L8.cube = data_cube(L8.col, v) 
 L8.cube = select_bands(L8.cube, c("B04", "B05")) 
 L8.ndvi = apply_pixel(L8.cube, "(B05-B04)/(B05+B04)", "NDVI") 
 L8.ndvi
 L8.ndvi.median =  reduce_time(L8.ndvi, "median(NDVI)") 
 plot(L8.ndvi.median, key.pos=1, zlim=c(0,1))
 
}
