% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_pixel.R, R/streaming.R
\name{apply_pixel}
\alias{apply_pixel}
\title{Apply arithmetic expressions over all pixels of a data cube}
\usage{
apply_pixel(x, FUN, ...)

apply_pixel(x, FUN, ...)
}
\arguments{
\item{x}{four-dimensional input bands with dimension order band, time, y, x}

\item{FUN}{function which receives a vector of band values in a one-dimensional array}

\item{...}{further arguments passed to FUN}

\item{cube}{Source data cube}

\item{expr}{character vector with one or more arithmetic expressions (see Details)}

\item{names}{optional character vector with the same length as expr to specify band names for the output cube}
}
\value{
A proxy data cube object
}
\description{
Create a proxy data cube, which applies arithmetics expressions over all pixels of a data cube. Expressions may access band values by their name.
}
\details{
gdalcubes uses the \href{https://github.com/ArashPartow/exprtk}{exprtk library} to evaluate expressions in C++, you can look at the library examples 
to see what kind of expressions you can execute.

FUN is expected to produce a numeric vector (or scalar) where elements are interpreted as new bands in the result
}
\note{
This function returns a proxy object, i.e., it will not start any computations besides deriving the shape of the result.

This is a helper function that uses the same dimension ordering as gdalcubes streaming. It can be used to simplify 
the application of R functions e.g. over time series in a data cube.
}
\examples{
 L8_files <- list.files(system.file("L8NY18", package = "gdalcubes"), 
                        ".TIF", recursive = TRUE, full.names = TRUE)
 v = cube_view(l=388941.2, r=766552.4, b=4345299, t=4744931, 
         proj="EPSG:32618",
         nx = 497, ny=526, t0="2018-01", t1="2018-12", dt="P1M")
 L8.col = create_image_collection(L8_files, "L8_L1TP") 
 L8.cube = cube(L8.col, v) 
 L8.cube = select_bands(L8.cube, c("B04", "B05")) 
 L8.ndvi = apply_pixel(L8.cube, "(B05-B04)/(B05+B04)", "NDVI") 
 L8.ndvi
 L8.ndvi.median =  reduce_time(L8.ndvi, "median(NDVI)") 
 plot(L8.ndvi.median, key.pos=1, zlim=c(0,1))
 
\dontrun{
load(system.file("extdata","sample_chunk.Rdata", package="gdalcubes"))
y = apply_pixel(sample_chunk, function(x) {
 ndvi <- (x[8]-x[4])/(x[8]+x[4])
 return(c(ndvi=(x[8]-x[4])/(x[8]+x[4]), nir=x[8]))
})}
}
