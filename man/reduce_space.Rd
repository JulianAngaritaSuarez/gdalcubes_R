% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reduce.R, R/streaming.R
\name{reduce_space}
\alias{reduce_space}
\title{Reduce a data cube over spatial (x,y or lat,lon) dimensions}
\usage{
reduce_space(x, FUN, ...)

reduce_space(x, FUN, ...)
}
\arguments{
\item{x}{four-dimensional input bands with dimension order band, time, y, x}

\item{FUN}{function which receives one spatial slice in a three-dimensional array with dimensions bands, y, x as input}

\item{...}{Optional additional expressions (if expr is not a vector)}

\item{cube}{Source data cube}

\item{expr}{Either a single string, or a vector of strings defining which reducers wlil be applied over which bands of the input cube}

\item{...}{further arguments passed to FUN}
}
\value{
A proxy data cube object
}
\description{
Create a proxy data cube, which applies one ore more reducer functions over selected bands of spatial slices of a data cube
}
\details{
Notice that expressions have a very simple format: the reducer is followed by the name of a band in parantheses. You cannot add
more complex functions or arguments.

Possible reducers currently are "min", "max", "sum", "prod", "count", "mean", "median", "var", "sd", "which_min", and "which_max".

FUN is expected to produce a numeric vector (or scalar) where elements are interpreted as new bands in the result
}
\note{
Implemented reducers will ignore any NAN values (as na.rm=TRUE does)

This function returns a proxy object, i.e., it will not start any computations besides deriving the shape of the result.

This is a helper function that uses the same dimension ordering as gdalcubes streaming. It can be used to simplify 
the application of R functions e.g. over spatial slices in a data cube.
}
\examples{
 L8_files <- list.files(system.file("L8NY18", package = "gdalcubes"),
                        ".TIF", recursive = TRUE, full.names = TRUE)
 v = cube_view(l=388941.2, r=766552.4, b=4345299, t=4744931, 
         proj="EPSG:32618",
         nx = 497, ny=526, t0="2018-01", t1="2018-12", dt="P1M")
 L8.col = create_image_collection(L8_files, "L8_L1TP") 
 L8.cube = cube(L8.col, v) 
 L8.rgb = select_bands(L8.cube, c("B02", "B03", "B04"))
 L8.rgb.median = reduce_space(L8.rgb, "median(B02)", "median(B03)", "median(B04)")  
 L8.rgb.median
 plot(L8.rgb.median)
\dontrun{
load(system.file("extdata","sample_chunk.Rdata", package="gdalcubes"))
y = reduce_space(sample_chunk, function(x) {
 ndvi <- (x[8,,]-x[4,,])/(x[8,,]+x[4,,])
 return(c(min(ndvi, na.rm=TRUE),max(ndvi, na.rm=T)))
})}
}
