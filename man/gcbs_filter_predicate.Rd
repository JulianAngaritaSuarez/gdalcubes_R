% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_predicate.R
\name{gcbs_filter_predicate}
\alias{gcbs_filter_predicate}
\title{Filter data cube pixels by a user-defined predicate on band values}
\usage{
gcbs_filter_predicate(cube, pred)
}
\arguments{
\item{cube}{Source data cube}

\item{pred}{predicate to be evaluated over all pixels}
}
\value{
A proxy data cube object
}
\description{
Create a proxy data cube, which evaluates a predicate over all pixels of a data cube. For all pixels which fulfill the predicate, the original
band values are returned. Other pixels are simply filled with NANs. The predicate may access band values by their name.
}
\details{
gdalcubes uses the \href{https://github.com/ArashPartow/exprtk}{exprtk library} to evaluate expressions in C++, you can look at the library examples 
to see what kind of expressions you can execute.
}
\note{
This function returns a proxy object, i.e., it will not start any computations besides deriving the shape of the result.
}
\examples{
 L8_files <- list.files(system.file("L8NY18", package = "gdalcubes"),
                        ".TIF", recursive = TRUE, full.names = TRUE)
 v = gcbs_view(l=388941.2, r=766552.4, b=4345299, t=4744931, 
         proj="EPSG:32618",
         nx = 497, ny=526, t0="2018-01", t1="2018-12", dt="P1M")
 L8.col = gcbs_create_image_collection(L8_files, "L8_L1TP") 
 L8.cube = gcbs_cube(L8.col, v) 
 L8.cube = gcbs_select_bands(L8.cube, c("B04", "B05")) 
 L8.ndvi = gcbs_apply_pixel(L8.cube, "(B05-B04)/(B05+B04)", "NDVI") 
 L8.ndvi.filtered = gcbs_filter_predicate(L8.ndvi, "NDVI > 0.5") 
 L8.ndvi.filtered
 L8.ndvi.count =  gcbs_reduce_time(L8.ndvi, "count(NDVI)") 
 plot(L8.ndvi.count, key.pos=1)
}
